package euler

/**
 * Even Fibonacci numbers
 * 
 * Find the sum of all the even-valued terms in the Fibonacci
 *  sequence which do not exceed four million.
 *  
 *  Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
object P02 {

  def s1 = {
    lazy val fs: Stream[Int] = 
  0 #:: 1 #:: fs.zip(fs.tail).map(p => p._1 + p._2)

  fs.view.takeWhile(_ <= 4000000).filter(_ % 2 == 0).sum
  }
  
  def s2 = {
    def fibFrom(a: Int, b: Int): Stream[Int] = a #:: fibFrom(b, a + b)
    val fibs = fibFrom(1, 1)
    
    fibs.view.takeWhile(_ <= 4000000).filter(_ % 2 == 0).sum
  }
}